{"version":3,"file":"main.275a8bc95ba2a222e6ae.hot-update.js","sources":["webpack:///./src/common/distributionCenters/pages/fleets/List.js"],"sourcesContent":["// IMPORTS\n// Material UI\nimport AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport IconButton from '@material-ui/core/IconButton'\nimport Slide from '@material-ui/core/Slide'\nimport Switch from '@material-ui/core/Switch'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TextField from '@material-ui/core/TextField'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport withStyles from '@material-ui/core/styles/withStyles'\nimport CloseIcon from '@material-ui/icons/Close'\nimport PropTypes from 'prop-types'\n\n// Externals imports (Dependencies)\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\n// Internal imports\nimport styles from '../../../../resources/theme/distributionCenters'\nimport EnhancedComponent from '../../../components/EnhancedComponent'\nimport { fetchFleetsPerDistributionCenters } from '../../../fleet/FleetActions'\n\nfunction Transition(props) {\n  return <Slide direction=\"down\" {...props} />\n}\n\nclass List extends EnhancedComponent {\n  state = {\n    dirty: false,\n    fields: {\n      fleet: [],\n    },\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!this.state.dirty && nextProps.data) {\n      this.setState({\n        fields: {\n          fleet: nextProps.data,\n        },\n      })\n    }\n  }\n\n  handleChange = index => event => {\n    let localState = this.state.fields.fleet\n    localState[index].status = event.target.checked\n\n    this.setState({\n      fields: {\n        ...this.state.fields,\n        localState,\n      },\n    })\n  }\n\n  onSubmit = e => {\n    e.preventDefault()\n    this.props.onSubmit && this.props.onSubmit(this.state.fields.fleet)\n  }\n\n  onClose = () => {\n    this.props.onClose && this.props.onClose()\n  }\n\n  render() {\n    const { classes, data } = this.props\n    return (\n      <Dialog\n        open={data !== null}\n        fullScreen\n        onClose={this.onClose}\n        TransitionComponent={Transition}\n      >\n        <form onSubmit={this.onSubmit}>\n          <AppBar className={classes.appBar}>\n            <Toolbar>\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n                Frotistas do Centro de Distribuição\n              </Typography>\n              <IconButton\n                color=\"inherit\"\n                onClick={this.onClose}\n                aria-label=\"Close\"\n              >\n                <CloseIcon />\n              </IconButton>\n            </Toolbar>\n          </AppBar>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Ativo/Inativo</TableCell>\n                <TableCell>Identificador</TableCell>\n                <TableCell>Descrição</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.fields.CD.map((item, index) => (\n                <TableRow key={item.id}>\n                  <TableCell>\n                    <Switch\n                      checked={this.state.fields.CD[index].status}\n                      onChange={this.handleChange(index)}\n                      value={item.id}\n                      color=\"primary\"\n                    />\n                  </TableCell>\n                  <TableCell>{item.id}</TableCell>\n                  <TableCell>{item.description}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Salvar\n          </Button>\n        </form>\n      </Dialog>\n    )\n  }\n}\n\nList.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n        fetchFleetsPerDistributionCenters,\n    },\n    dispatch\n  )\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(withStyles(styles)(List))\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AADA;AAFA;AACA;AAgBA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AAVA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA9BA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;;;AAuBA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAXA;AAiBA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;AAnGA;AACA;AAqGA;AACA;AADA;AACA;AAGA;AAAA;AAGA;AADA;AAFA;AACA;AAOA;;;;A","sourceRoot":""}